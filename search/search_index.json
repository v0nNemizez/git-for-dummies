{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This is a guide to using git for version control. Git is a distributed version control system that allows multiple developers to collaborate on a project. It tracks changes to files and allows developers to work on different features simultaneously without interfering with each other's work. Here is an example of a git workflow for a project with multiple developers: Clone the repository to your local machine Create a branch for your feature Add and commit your changes Push your branch to the remote repository Create a pull request to merge your branch into the master branch Review the pull request Merge the pull request Delete the branch Each step is explained in more detail under the Commands section.","title":"Home"},{"location":"#home","text":"This is a guide to using git for version control. Git is a distributed version control system that allows multiple developers to collaborate on a project. It tracks changes to files and allows developers to work on different features simultaneously without interfering with each other's work. Here is an example of a git workflow for a project with multiple developers: Clone the repository to your local machine Create a branch for your feature Add and commit your changes Push your branch to the remote repository Create a pull request to merge your branch into the master branch Review the pull request Merge the pull request Delete the branch Each step is explained in more detail under the Commands section.","title":"Home"},{"location":"Basic%20commands/add/","text":"Add syntax: git add file/folder What? git add adds changes in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit. How? suppose you have a project tree looking like this: \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 Commands \u2502 \u2502 \u251c\u2500\u2500 add.md \u2502 \u2502 \u251c\u2500\u2500 clone.md \u2502 \u2502 \u2514\u2500\u2500 pull.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml You have made changes to the file add.md and want to add it to the staging area. You can do this by running: git add docs/Commands/add.md To add all changes in the folder Commands you can run: git add docs/Commands","title":"Add"},{"location":"Basic%20commands/add/#add","text":"syntax: git add file/folder","title":"Add"},{"location":"Basic%20commands/add/#what","text":"git add adds changes in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit.","title":"What?"},{"location":"Basic%20commands/add/#how","text":"suppose you have a project tree looking like this: \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 Commands \u2502 \u2502 \u251c\u2500\u2500 add.md \u2502 \u2502 \u251c\u2500\u2500 clone.md \u2502 \u2502 \u2514\u2500\u2500 pull.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml You have made changes to the file add.md and want to add it to the staging area. You can do this by running: git add docs/Commands/add.md To add all changes in the folder Commands you can run: git add docs/Commands","title":"How?"},{"location":"Basic%20commands/clone/","text":"Clone Syntax git clone <url> What? Clone a repository into a new directory. How? To clone a repository, you need to know the URL of the repository you want to clone. You can find the URL by navigating to the repository on GitHub (or whatever git provider you use) and clicking the \"Clone or download\" button.","title":"Clone"},{"location":"Basic%20commands/clone/#clone","text":"","title":"Clone"},{"location":"Basic%20commands/clone/#syntax","text":"git clone <url>","title":"Syntax"},{"location":"Basic%20commands/clone/#what","text":"Clone a repository into a new directory.","title":"What?"},{"location":"Basic%20commands/clone/#how","text":"To clone a repository, you need to know the URL of the repository you want to clone. You can find the URL by navigating to the repository on GitHub (or whatever git provider you use) and clicking the \"Clone or download\" button.","title":"How?"},{"location":"Basic%20commands/commit/","text":"Commit Syntax: git commit -m \"message\" Commit is a command that is used to save changes to the local repository. It is a snapshot of the project at a particular point in time. It is a good practice to commit changes to the repository frequently. This helps in keeping track of the changes made to the project and allows you to revert to a previous state if needed. Committing changes involves two steps: 1. Staging : This step involves selecting the changes that you want to commit. You can stage changes using the git add command. 2. Committing : This step involves creating a commit with the staged changes. You can commit changes using the git commit command. Message : It is a good practice to add a meaningful message to your commit. This helps in understanding the changes made in the commit. Example : Suppose you have made changes to a file index.html and want to commit these changes. You can do this by running: git add index.html git commit -m \"Updated index.html\"","title":"Commit"},{"location":"Basic%20commands/commit/#commit","text":"Syntax: git commit -m \"message\" Commit is a command that is used to save changes to the local repository. It is a snapshot of the project at a particular point in time. It is a good practice to commit changes to the repository frequently. This helps in keeping track of the changes made to the project and allows you to revert to a previous state if needed. Committing changes involves two steps: 1. Staging : This step involves selecting the changes that you want to commit. You can stage changes using the git add command. 2. Committing : This step involves creating a commit with the staged changes. You can commit changes using the git commit command. Message : It is a good practice to add a meaningful message to your commit. This helps in understanding the changes made in the commit. Example : Suppose you have made changes to a file index.html and want to commit these changes. You can do this by running: git add index.html git commit -m \"Updated index.html\"","title":"Commit"},{"location":"Basic%20commands/init/","text":"init syntax: git init What? git init is used to create a new local Git repository in the current folder. This command creates a new subdirectory named .git that contains all of your necessary repository files.","title":"init"},{"location":"Basic%20commands/init/#init","text":"syntax: git init","title":"init"},{"location":"Basic%20commands/init/#what","text":"git init is used to create a new local Git repository in the current folder. This command creates a new subdirectory named .git that contains all of your necessary repository files.","title":"What?"},{"location":"Basic%20commands/pull/","text":"Pull Syntax git pull What? Pull is used to fetch the changes from the remote repository and merge them into the local repository.","title":"Pull"},{"location":"Basic%20commands/pull/#pull","text":"","title":"Pull"},{"location":"Basic%20commands/pull/#syntax","text":"git pull","title":"Syntax"},{"location":"Basic%20commands/pull/#what","text":"Pull is used to fetch the changes from the remote repository and merge them into the local repository.","title":"What?"},{"location":"Configuration/Config_remote/","text":"Configurations for remote repositories Git can be configured to work with remote repositories in a variety of ways. When cloning a repository, the remote repository is automatically set as the origin . An example of this is the git checkout command: git checkout -b <branch_name> origin/<branch_name> ... or git push command: git push origin <branch_name> For existing repositories, the remote repository can be set using the git remote command. git remote add origin <url>","title":"Configurations for remote repositories"},{"location":"Configuration/Config_remote/#configurations-for-remote-repositories","text":"Git can be configured to work with remote repositories in a variety of ways. When cloning a repository, the remote repository is automatically set as the origin . An example of this is the git checkout command: git checkout -b <branch_name> origin/<branch_name> ... or git push command: git push origin <branch_name> For existing repositories, the remote repository can be set using the git remote command. git remote add origin <url>","title":"Configurations for remote repositories"}]}